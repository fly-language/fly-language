"use strict";
/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var command_registration_1 = require("../base/commands/command-registration");
var types_1 = require("../base/types");
var commit_model_1 = require("./commit-model");
var model_source_1 = require("./model-source");
/**
 * This container module does NOT provide any binding for TYPES.ModelSource because that needs to be
 * done according to the needs of the application. You can choose between a local (LocalModelSource)
 * and a remote (e.g. WebSocketDiagramServer) implementation.
 */
var modelSourceModule = new inversify_1.ContainerModule(function (bind, _unbind, isBound) {
    bind(types_1.TYPES.ModelSourceProvider).toProvider(function (context) {
        return function () {
            return new Promise(function (resolve) {
                resolve(context.container.get(types_1.TYPES.ModelSource));
            });
        };
    });
    command_registration_1.configureCommand({ bind: bind, isBound: isBound }, commit_model_1.CommitModelCommand);
    bind(types_1.TYPES.IActionHandlerInitializer).toService(types_1.TYPES.ModelSource);
    bind(model_source_1.ComputedBoundsApplicator).toSelf().inSingletonScope();
});
exports.default = modelSourceModule;
//# sourceMappingURL=di.config.js.map