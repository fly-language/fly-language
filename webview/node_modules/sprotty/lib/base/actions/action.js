"use strict";
/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
function isAction(object) {
    return object !== undefined && object.hasOwnProperty('kind') && typeof (object['kind']) === 'string';
}
exports.isAction = isAction;
function isRequestAction(object) {
    return isAction(object) && object.hasOwnProperty('requestId')
        && typeof (object['requestId']) === 'string';
}
exports.isRequestAction = isRequestAction;
var nextRequestId = 1;
/**
 * Generate a unique `requestId` for a request action.
 */
function generateRequestId() {
    return (nextRequestId++).toString();
}
exports.generateRequestId = generateRequestId;
function isResponseAction(object) {
    return isAction(object) && object.hasOwnProperty('responseId')
        && typeof (object['responseId']) === 'string'
        && object['responseId'] !== '';
}
exports.isResponseAction = isResponseAction;
/**
 * A reject action is fired to indicate that a request must be rejected.
 */
var RejectAction = /** @class */ (function () {
    function RejectAction(message, responseId, detail) {
        this.message = message;
        this.responseId = responseId;
        this.detail = detail;
        this.kind = RejectAction.KIND;
    }
    RejectAction.KIND = 'rejectRequest';
    return RejectAction;
}());
exports.RejectAction = RejectAction;
/**
 * A list of actions with a label.
 * Labeled actions are used to denote a group of actions in a user-interface context, e.g.,
 * to define an entry in the command palette or in the context menu.
 */
var LabeledAction = /** @class */ (function () {
    function LabeledAction(label, actions, icon) {
        this.label = label;
        this.actions = actions;
        this.icon = icon;
    }
    return LabeledAction;
}());
exports.LabeledAction = LabeledAction;
function isLabeledAction(element) {
    return element !== undefined
        && element.label !== undefined
        && element.actions !== undefined;
}
exports.isLabeledAction = isLabeledAction;
//# sourceMappingURL=action.js.map