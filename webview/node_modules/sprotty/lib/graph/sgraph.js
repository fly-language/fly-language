"use strict";
/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var smodel_1 = require("../base/model/smodel");
var model_1 = require("../features/bounds/model");
var model_2 = require("../features/edge-layout/model");
var delete_1 = require("../features/edit/delete");
var model_3 = require("../features/edit/model");
var model_4 = require("../features/fade/model");
var model_5 = require("../features/hover/model");
var model_6 = require("../features/move/model");
var model_7 = require("../features/routing/model");
var model_8 = require("../features/select/model");
var viewport_root_1 = require("../features/viewport/viewport-root");
var geometry_1 = require("../utils/geometry");
var iterable_1 = require("../utils/iterable");
/**
 * Root element for graph-like models.
 */
var SGraph = /** @class */ (function (_super) {
    __extends(SGraph, _super);
    function SGraph(index) {
        if (index === void 0) { index = new SGraphIndex(); }
        return _super.call(this, index) || this;
    }
    return SGraph;
}(viewport_root_1.ViewportRootElement));
exports.SGraph = SGraph;
/**
 * Model element class for nodes, which are the main entities in a graph. A node can be connected to
 * another node via an SEdge. Such a connection can be direct, i.e. the node is the source or target of
 * the edge, or indirect through a port, i.e. it contains an SPort which is the source or target of the edge.
 */
var SNode = /** @class */ (function (_super) {
    __extends(SNode, _super);
    function SNode() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selected = false;
        _this.hoverFeedback = false;
        _this.opacity = 1;
        return _this;
    }
    SNode.prototype.canConnect = function (routable, role) {
        return this.children.find(function (c) { return c instanceof SPort; }) === undefined;
    };
    SNode.DEFAULT_FEATURES = [model_7.connectableFeature, delete_1.deletableFeature, model_8.selectFeature, model_1.boundsFeature,
        model_6.moveFeature, model_1.layoutContainerFeature, model_4.fadeFeature, model_5.hoverFeedbackFeature, model_5.popupFeature];
    return SNode;
}(model_7.SConnectableElement));
exports.SNode = SNode;
/**
 * A port is a connection point for edges. It should always be contained in an SNode.
 */
var SPort = /** @class */ (function (_super) {
    __extends(SPort, _super);
    function SPort() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selected = false;
        _this.hoverFeedback = false;
        _this.opacity = 1;
        return _this;
    }
    SPort.DEFAULT_FEATURES = [model_7.connectableFeature, model_8.selectFeature, model_1.boundsFeature, model_4.fadeFeature,
        model_5.hoverFeedbackFeature];
    return SPort;
}(model_7.SConnectableElement));
exports.SPort = SPort;
/**
 * Model element class for edges, which are the connectors in a graph. An edge has a source and a target,
 * each of which can be either a node or a port. The source and target elements are referenced via their
 * ids and can be resolved with the index stored in the root element.
 */
var SEdge = /** @class */ (function (_super) {
    __extends(SEdge, _super);
    function SEdge() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selected = false;
        _this.hoverFeedback = false;
        _this.opacity = 1;
        return _this;
    }
    SEdge.DEFAULT_FEATURES = [model_3.editFeature, delete_1.deletableFeature, model_8.selectFeature, model_4.fadeFeature,
        model_5.hoverFeedbackFeature];
    return SEdge;
}(model_7.SRoutableElement));
exports.SEdge = SEdge;
/**
 * A label can be attached to a node, edge, or port, and contains some text to be rendered in its view.
 */
var SLabel = /** @class */ (function (_super) {
    __extends(SLabel, _super);
    function SLabel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selected = false;
        _this.alignment = geometry_1.ORIGIN_POINT;
        _this.opacity = 1;
        return _this;
    }
    SLabel.DEFAULT_FEATURES = [model_1.boundsFeature, model_1.alignFeature, model_1.layoutableChildFeature,
        model_2.edgeLayoutFeature, model_4.fadeFeature];
    return SLabel;
}(model_1.SShapeElement));
exports.SLabel = SLabel;
/**
 * A compartment is used to group multiple child elements such as labels of a node. Usually a `vbox`
 * or `hbox` layout is used to arrange these children.
 */
var SCompartment = /** @class */ (function (_super) {
    __extends(SCompartment, _super);
    function SCompartment() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.opacity = 1;
        return _this;
    }
    SCompartment.DEFAULT_FEATURES = [model_1.boundsFeature, model_1.layoutContainerFeature, model_1.layoutableChildFeature,
        model_4.fadeFeature];
    return SCompartment;
}(model_1.SShapeElement));
exports.SCompartment = SCompartment;
/**
 * A specialized model index that tracks outgoing and incoming edges.
 */
var SGraphIndex = /** @class */ (function (_super) {
    __extends(SGraphIndex, _super);
    function SGraphIndex() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.outgoing = new Map;
        _this.incoming = new Map;
        return _this;
    }
    SGraphIndex.prototype.add = function (element) {
        _super.prototype.add.call(this, element);
        if (element instanceof SEdge) {
            // Register the edge in the outgoing map
            if (element.sourceId) {
                var sourceArr = this.outgoing.get(element.sourceId);
                if (sourceArr === undefined)
                    this.outgoing.set(element.sourceId, [element]);
                else
                    sourceArr.push(element);
            }
            // Register the edge in the incoming map
            if (element.targetId) {
                var targetArr = this.incoming.get(element.targetId);
                if (targetArr === undefined)
                    this.incoming.set(element.targetId, [element]);
                else
                    targetArr.push(element);
            }
        }
    };
    SGraphIndex.prototype.remove = function (element) {
        _super.prototype.remove.call(this, element);
        if (element instanceof SEdge) {
            // Remove the edge from the outgoing map
            var sourceArr = this.outgoing.get(element.sourceId);
            if (sourceArr !== undefined) {
                var index = sourceArr.indexOf(element);
                if (index >= 0) {
                    if (sourceArr.length === 1)
                        this.outgoing.delete(element.sourceId);
                    else
                        sourceArr.splice(index, 1);
                }
            }
            // Remove the edge from the incoming map
            var targetArr = this.incoming.get(element.targetId);
            if (targetArr !== undefined) {
                var index = targetArr.indexOf(element);
                if (index >= 0) {
                    if (targetArr.length === 1)
                        this.incoming.delete(element.targetId);
                    else
                        targetArr.splice(index, 1);
                }
            }
        }
    };
    SGraphIndex.prototype.getAttachedElements = function (element) {
        var _this = this;
        return new iterable_1.FluentIterableImpl(function () { return ({
            outgoing: _this.outgoing.get(element.id),
            incoming: _this.incoming.get(element.id),
            nextOutgoingIndex: 0,
            nextIncomingIndex: 0
        }); }, function (state) {
            var index = state.nextOutgoingIndex;
            if (state.outgoing !== undefined && index < state.outgoing.length) {
                state.nextOutgoingIndex = index + 1;
                return { done: false, value: state.outgoing[index] };
            }
            index = state.nextIncomingIndex;
            if (state.incoming !== undefined) {
                // Filter out self-loops: edges that are both outgoing and incoming
                while (index < state.incoming.length) {
                    var edge = state.incoming[index];
                    if (edge.sourceId !== edge.targetId) {
                        state.nextIncomingIndex = index + 1;
                        return { done: false, value: edge };
                    }
                    index++;
                }
            }
            return { done: true, value: undefined };
        });
    };
    SGraphIndex.prototype.getIncomingEdges = function (element) {
        return this.incoming.get(element.id) || [];
    };
    SGraphIndex.prototype.getOutgoingEdges = function (element) {
        return this.outgoing.get(element.id) || [];
    };
    return SGraphIndex;
}(smodel_1.SModelIndex));
exports.SGraphIndex = SGraphIndex;
//# sourceMappingURL=sgraph.js.map