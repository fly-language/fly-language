"use strict";
/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var types_1 = require("../../base/types");
var hover_1 = require("./hover");
var popup_position_updater_1 = require("./popup-position-updater");
var command_registration_1 = require("../../base/commands/command-registration");
var action_handler_1 = require("../../base/actions/action-handler");
var center_fit_1 = require("../viewport/center-fit");
var viewport_1 = require("../viewport/viewport");
var move_1 = require("../move/move");
var hoverModule = new inversify_1.ContainerModule(function (bind, _unbind, isBound) {
    bind(types_1.TYPES.PopupVNodePostprocessor).to(popup_position_updater_1.PopupPositionUpdater).inSingletonScope();
    bind(types_1.TYPES.MouseListener).to(hover_1.HoverMouseListener);
    bind(types_1.TYPES.PopupMouseListener).to(hover_1.PopupHoverMouseListener);
    bind(types_1.TYPES.KeyListener).to(hover_1.HoverKeyListener);
    bind(types_1.TYPES.HoverState).toConstantValue({
        mouseOverTimer: undefined,
        mouseOutTimer: undefined,
        popupOpen: false,
        previousPopupElement: undefined
    });
    bind(hover_1.ClosePopupActionHandler).toSelf().inSingletonScope();
    var context = { bind: bind, isBound: isBound };
    command_registration_1.configureCommand(context, hover_1.HoverFeedbackCommand);
    command_registration_1.configureCommand(context, hover_1.SetPopupModelCommand);
    action_handler_1.configureActionHandler(context, hover_1.SetPopupModelCommand.KIND, hover_1.ClosePopupActionHandler);
    action_handler_1.configureActionHandler(context, center_fit_1.FitToScreenCommand.KIND, hover_1.ClosePopupActionHandler);
    action_handler_1.configureActionHandler(context, center_fit_1.CenterCommand.KIND, hover_1.ClosePopupActionHandler);
    action_handler_1.configureActionHandler(context, viewport_1.SetViewportCommand.KIND, hover_1.ClosePopupActionHandler);
    action_handler_1.configureActionHandler(context, move_1.MoveCommand.KIND, hover_1.ClosePopupActionHandler);
});
exports.default = hoverModule;
//# sourceMappingURL=di.config.js.map