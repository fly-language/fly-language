"use strict";
/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var browser_1 = require("../../utils/browser");
var mouse_tool_1 = require("../../base/views/mouse-tool");
var smodel_utils_1 = require("../../base/model/smodel-utils");
var viewport_1 = require("./viewport");
var model_1 = require("./model");
function isZoomable(element) {
    return 'zoom' in element;
}
exports.isZoomable = isZoomable;
function getZoom(label) {
    var zoom = 1;
    var viewport = smodel_utils_1.findParentByFeature(label, model_1.isViewport);
    if (viewport) {
        zoom = viewport.zoom;
    }
    return zoom;
}
exports.getZoom = getZoom;
var ZoomMouseListener = /** @class */ (function (_super) {
    __extends(ZoomMouseListener, _super);
    function ZoomMouseListener() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZoomMouseListener.prototype.wheel = function (target, event) {
        var viewport = smodel_utils_1.findParentByFeature(target, model_1.isViewport);
        if (viewport) {
            var newZoom = this.getZoomFactor(event);
            var viewportOffset = this.getViewportOffset(target.root, event);
            var offsetFactor = 1.0 / (newZoom * viewport.zoom) - 1.0 / viewport.zoom;
            var newViewport = {
                scroll: {
                    x: viewport.scroll.x - offsetFactor * viewportOffset.x,
                    y: viewport.scroll.y - offsetFactor * viewportOffset.y
                },
                zoom: viewport.zoom * newZoom
            };
            return [new viewport_1.SetViewportAction(viewport.id, newViewport, false)];
        }
        return [];
    };
    ZoomMouseListener.prototype.getViewportOffset = function (root, event) {
        var canvasBounds = root.canvasBounds;
        var windowScroll = browser_1.getWindowScroll();
        return {
            x: event.clientX + windowScroll.x - canvasBounds.x,
            y: event.clientY + windowScroll.y - canvasBounds.y
        };
    };
    ZoomMouseListener.prototype.getZoomFactor = function (event) {
        if (event.deltaMode === event.DOM_DELTA_PAGE)
            return Math.exp(-event.deltaY * 0.5);
        else if (event.deltaMode === event.DOM_DELTA_LINE)
            return Math.exp(-event.deltaY * 0.05);
        else // deltaMode === DOM_DELTA_PIXEL
            return Math.exp(-event.deltaY * 0.005);
    };
    return ZoomMouseListener;
}(mouse_tool_1.MouseListener));
exports.ZoomMouseListener = ZoomMouseListener;
//# sourceMappingURL=zoom.js.map