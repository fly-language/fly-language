/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { VNode } from "snabbdom/vnode";
import { IView, RenderingContext } from "../base/views/view";
import { ViewportRootElement } from "../features/viewport/viewport-root";
import { SShapeElement } from '../features/bounds/model';
import { ShapeView } from '../features/bounds/views';
import { Hoverable } from '../features/hover/model';
import { Selectable } from '../features/select/model';
import { SModelElement } from '../base/model/smodel';
export declare class SvgViewportView implements IView {
    render(model: Readonly<ViewportRootElement>, context: RenderingContext): VNode;
}
export declare class CircularNodeView extends ShapeView {
    render(node: Readonly<SShapeElement & Hoverable & Selectable>, context: RenderingContext): VNode | undefined;
    protected getRadius(node: SShapeElement): number;
}
export declare class RectangularNodeView extends ShapeView {
    render(node: Readonly<SShapeElement & Hoverable & Selectable>, context: RenderingContext): VNode | undefined;
}
export declare class DiamondNodeView extends ShapeView {
    render(node: Readonly<SShapeElement & Hoverable & Selectable>, context: RenderingContext): VNode | undefined;
}
export declare class EmptyGroupView implements IView {
    render(model: Readonly<SModelElement>, context: RenderingContext): VNode;
}
//# sourceMappingURL=svg-views.d.ts.map