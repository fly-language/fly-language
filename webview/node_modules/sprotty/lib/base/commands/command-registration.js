"use strict";
/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var inversify_2 = require("../../utils/inversify");
var types_1 = require("../types");
var CommandActionHandler = /** @class */ (function () {
    function CommandActionHandler(commandRegistration) {
        this.commandRegistration = commandRegistration;
    }
    CommandActionHandler.prototype.handle = function (action) {
        return this.commandRegistration.factory(action);
    };
    return CommandActionHandler;
}());
exports.CommandActionHandler = CommandActionHandler;
var CommandActionHandlerInitializer = /** @class */ (function () {
    function CommandActionHandlerInitializer(registrations) {
        this.registrations = registrations;
    }
    CommandActionHandlerInitializer.prototype.initialize = function (registry) {
        this.registrations.forEach(function (registration) {
            return registry.register(registration.kind, new CommandActionHandler(registration));
        });
    };
    CommandActionHandlerInitializer = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.multiInject(types_1.TYPES.CommandRegistration)), __param(0, inversify_1.optional()),
        __metadata("design:paramtypes", [Array])
    ], CommandActionHandlerInitializer);
    return CommandActionHandlerInitializer;
}());
exports.CommandActionHandlerInitializer = CommandActionHandlerInitializer;
/**
 * Use this method in your DI configuration to register a new command to the diagram.
 */
function configureCommand(context, constr) {
    if (!inversify_2.isInjectable(constr)) {
        throw new Error("Commands should be @injectable: " + constr.name);
    }
    if (!context.isBound(constr)) {
        context.bind(constr).toSelf();
    }
    context.bind(types_1.TYPES.CommandRegistration).toDynamicValue(function (ctx) { return ({
        kind: constr.KIND,
        factory: function (action) {
            var childContainer = new inversify_1.Container();
            childContainer.parent = ctx.container;
            childContainer.bind(types_1.TYPES.Action).toConstantValue(action);
            return childContainer.get(constr);
        }
    }); });
}
exports.configureCommand = configureCommand;
//# sourceMappingURL=command-registration.js.map