"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var inversify_1 = require("inversify");
var types_1 = require("../types");
var tool_1 = require("./tool");
var key_tool_1 = require("../views/key-tool");
var keyboard_1 = require("../../utils/keyboard");
var ToolManager = /** @class */ (function () {
    function ToolManager() {
        this.tools = [];
        this.defaultTools = [];
        this.actives = [];
    }
    Object.defineProperty(ToolManager.prototype, "managedTools", {
        get: function () {
            return this.defaultTools.concat(this.tools);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolManager.prototype, "activeTools", {
        get: function () {
            return this.actives;
        },
        enumerable: true,
        configurable: true
    });
    ToolManager.prototype.disableActiveTools = function () {
        this.actives.forEach(function (tool) { return tool.disable(); });
        this.actives.splice(0, this.actives.length);
    };
    ToolManager.prototype.enableDefaultTools = function () {
        this.enable(this.defaultTools.map(function (tool) { return tool.id; }));
    };
    ToolManager.prototype.enable = function (toolIds) {
        var _this = this;
        this.disableActiveTools();
        var tools = toolIds.map(function (id) { return _this.tool(id); });
        tools.forEach(function (tool) {
            if (tool !== undefined) {
                tool.enable();
                _this.actives.push(tool);
            }
        });
    };
    ToolManager.prototype.tool = function (toolId) {
        return this.managedTools.find(function (tool) { return tool.id === toolId; });
    };
    ToolManager.prototype.registerDefaultTools = function () {
        var tools = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            tools[_i] = arguments[_i];
        }
        for (var _a = 0, tools_1 = tools; _a < tools_1.length; _a++) {
            var tool = tools_1[_a];
            this.defaultTools.push(tool);
        }
    };
    ToolManager.prototype.registerTools = function () {
        var tools = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            tools[_i] = arguments[_i];
        }
        for (var _a = 0, tools_2 = tools; _a < tools_2.length; _a++) {
            var tool = tools_2[_a];
            this.tools.push(tool);
        }
    };
    ToolManager = __decorate([
        inversify_1.injectable()
    ], ToolManager);
    return ToolManager;
}());
exports.ToolManager = ToolManager;
var ToolManagerActionHandler = /** @class */ (function () {
    function ToolManagerActionHandler() {
    }
    ToolManagerActionHandler.prototype.handle = function (action) {
        switch (action.kind) {
            case tool_1.EnableDefaultToolsAction.KIND:
                this.toolManager.enableDefaultTools();
                break;
            case tool_1.EnableToolsAction.KIND:
                this.toolManager.enable(action.toolIds);
                break;
        }
    };
    __decorate([
        inversify_1.inject(types_1.TYPES.IToolManager),
        __metadata("design:type", Object)
    ], ToolManagerActionHandler.prototype, "toolManager", void 0);
    ToolManagerActionHandler = __decorate([
        inversify_1.injectable()
    ], ToolManagerActionHandler);
    return ToolManagerActionHandler;
}());
exports.ToolManagerActionHandler = ToolManagerActionHandler;
var DefaultToolsEnablingKeyListener = /** @class */ (function (_super) {
    __extends(DefaultToolsEnablingKeyListener, _super);
    function DefaultToolsEnablingKeyListener() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DefaultToolsEnablingKeyListener.prototype.keyDown = function (element, event) {
        if (keyboard_1.matchesKeystroke(event, 'Escape')) {
            return [new tool_1.EnableDefaultToolsAction()];
        }
        return [];
    };
    DefaultToolsEnablingKeyListener = __decorate([
        inversify_1.injectable()
    ], DefaultToolsEnablingKeyListener);
    return DefaultToolsEnablingKeyListener;
}(key_tool_1.KeyListener));
exports.DefaultToolsEnablingKeyListener = DefaultToolsEnablingKeyListener;
//# sourceMappingURL=tool-manager.js.map