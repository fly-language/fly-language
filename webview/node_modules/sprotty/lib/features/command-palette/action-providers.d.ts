import { LabeledAction } from "../../base/actions/action";
import { SModelRoot } from "../../base/model/smodel";
import { ILogger } from "../../utils/logging";
import { Point } from "../../utils/geometry";
export interface ICommandPaletteActionProvider {
    getActions(root: Readonly<SModelRoot>, text: string, lastMousePosition?: Point, index?: number): Promise<LabeledAction[]>;
}
export declare class CommandPaletteActionProviderRegistry implements ICommandPaletteActionProvider {
    protected actionProviders: ICommandPaletteActionProvider[];
    constructor(actionProviders?: ICommandPaletteActionProvider[]);
    getActions(root: Readonly<SModelRoot>, text: string, lastMousePosition?: Point, index?: number): Promise<LabeledAction[]>;
}
export declare class RevealNamedElementActionProvider implements ICommandPaletteActionProvider {
    protected logger: ILogger;
    constructor(logger: ILogger);
    getActions(root: Readonly<SModelRoot>, text: string, lastMousePosition?: Point, index?: number): Promise<LabeledAction[]>;
    createSelectActions(modelRoot: SModelRoot): LabeledAction[];
}
//# sourceMappingURL=action-providers.d.ts.map