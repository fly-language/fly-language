/********************************************************************************
 * Copyright (c) 2017-2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { SModelRoot, SModelRootSchema, SChildElement, SModelElementSchema } from "../base/model/smodel";
import { Point, Dimension, Bounds } from "../utils/geometry";
import { BoundsAware, Alignable } from "../features/bounds/model";
import { Locateable } from "../features/move/model";
import { Selectable } from "../features/select/model";
import { SNode, SPort } from '../graph/sgraph';
/**
 * A node that is represented by a circle.
 */
export declare class CircularNode extends SNode {
    get anchorKind(): string;
}
/**
 * A node that is represented by a rectangle.
 */
export declare class RectangularNode extends SNode {
    get anchorKind(): string;
}
/**
 * A node that is represented by a diamond.
 */
export declare class DiamondNode extends SNode {
    get anchorKind(): string;
}
/**
 * A port that is represented by a circle.
 */
export declare class CircularPort extends SPort {
    get anchorKind(): string;
}
/**
 * A port that is represented by a rectangle.
 */
export declare class RectangularPort extends SPort {
    get anchorKind(): string;
}
/**
 * Serializable schema for HtmlRoot.
 */
export interface HtmlRootSchema extends SModelRootSchema {
    classes?: string[];
}
/**
 * Root model element class for HTML content. Usually this is rendered with a `div` DOM element.
 */
export declare class HtmlRoot extends SModelRoot {
    classes: string[];
}
/**
 * Serializable schema for PreRenderedElement.
 */
export interface PreRenderedElementSchema extends SModelElementSchema {
    code: string;
}
/**
 * Pre-rendered elements contain HTML or SVG code to be transferred to the DOM. This can be useful to
 * render complex figures or to compute the view on the server instead of the client code.
 */
export declare class PreRenderedElement extends SChildElement {
    code: string;
}
/**
 * Serializable schema for ShapedPreRenderedElement.
 */
export interface ShapedPreRenderedElementSchema extends PreRenderedElementSchema {
    position?: Point;
    size?: Dimension;
}
/**
 * Same as PreRenderedElement, but with a position and a size.
 */
export declare class ShapedPreRenderedElement extends PreRenderedElement implements BoundsAware, Locateable, Selectable, Alignable {
    static readonly DEFAULT_FEATURES: symbol[];
    position: Point;
    size: Dimension;
    selected: boolean;
    alignment: Point;
    get bounds(): Bounds;
    set bounds(newBounds: Bounds);
}
/**
 * A `foreignObject` element to be transferred to the DOM within the SVG.
 *
 * This can be useful to to benefit from e.g. HTML rendering features, such as line wrapping, inside of
 * the SVG diagram.  Note that `foreignObject` is not supported by all browsers and SVG viewers may not
 * support rendering the `foreignObject` content.
 *
 * If no dimensions are specified in the schema element, this element will obtain the dimension of
 * its parent to fill the entire available room. Thus, this element requires specified bounds itself
 * or bounds to be available for its parent.
 */
export declare class ForeignObjectElement extends ShapedPreRenderedElement {
    namespace: string;
    get bounds(): Bounds;
}
/**
 * Serializable schema for ForeignObjectElement.
 */
export interface ForeignObjectElementSchema extends ShapedPreRenderedElementSchema {
    /** The namespace to be assigned to the elements inside of the `foreignObject`. */
    namespace: string;
}
//# sourceMappingURL=model.d.ts.map