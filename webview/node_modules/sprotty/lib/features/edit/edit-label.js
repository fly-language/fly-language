"use strict";
/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var action_1 = require("../../base/actions/action");
var command_1 = require("../../base/commands/command");
var types_1 = require("../../base/types");
var mouse_tool_1 = require("../../base/views/mouse-tool");
var key_tool_1 = require("../../base/views/key-tool");
var keyboard_1 = require("../../utils/keyboard");
var model_1 = require("../select/model");
var iterable_1 = require("../../utils/iterable");
var model_2 = require("./model");
var EditLabelAction = /** @class */ (function () {
    function EditLabelAction(labelId) {
        this.labelId = labelId;
        this.kind = EditLabelAction.KIND;
    }
    EditLabelAction.KIND = 'EditLabel';
    return EditLabelAction;
}());
exports.EditLabelAction = EditLabelAction;
function isEditLabelAction(element) {
    return action_1.isAction(element) && element.kind === EditLabelAction.KIND && 'labelId' in element;
}
exports.isEditLabelAction = isEditLabelAction;
var ApplyLabelEditAction = /** @class */ (function () {
    function ApplyLabelEditAction(labelId, text) {
        this.labelId = labelId;
        this.text = text;
        this.kind = ApplyLabelEditAction.KIND;
    }
    ApplyLabelEditAction.KIND = 'applyLabelEdit';
    return ApplyLabelEditAction;
}());
exports.ApplyLabelEditAction = ApplyLabelEditAction;
var ResolvedLabelEdit = /** @class */ (function () {
    function ResolvedLabelEdit() {
    }
    return ResolvedLabelEdit;
}());
exports.ResolvedLabelEdit = ResolvedLabelEdit;
var ApplyLabelEditCommand = /** @class */ (function (_super) {
    __extends(ApplyLabelEditCommand, _super);
    function ApplyLabelEditCommand(action) {
        var _this = _super.call(this) || this;
        _this.action = action;
        return _this;
    }
    ApplyLabelEditCommand.prototype.execute = function (context) {
        var index = context.root.index;
        var label = index.getById(this.action.labelId);
        if (label && model_2.isEditableLabel(label)) {
            this.resolvedLabelEdit = { label: label, oldLabel: label.text, newLabel: this.action.text };
            label.text = this.action.text;
        }
        return context.root;
    };
    ApplyLabelEditCommand.prototype.undo = function (context) {
        if (this.resolvedLabelEdit) {
            this.resolvedLabelEdit.label.text = this.resolvedLabelEdit.oldLabel;
        }
        return context.root;
    };
    ApplyLabelEditCommand.prototype.redo = function (context) {
        if (this.resolvedLabelEdit) {
            this.resolvedLabelEdit.label.text = this.resolvedLabelEdit.newLabel;
        }
        return context.root;
    };
    ApplyLabelEditCommand.KIND = ApplyLabelEditAction.KIND;
    ApplyLabelEditCommand = __decorate([
        __param(0, inversify_1.inject(types_1.TYPES.Action)),
        __metadata("design:paramtypes", [ApplyLabelEditAction])
    ], ApplyLabelEditCommand);
    return ApplyLabelEditCommand;
}(command_1.Command));
exports.ApplyLabelEditCommand = ApplyLabelEditCommand;
var EditLabelMouseListener = /** @class */ (function (_super) {
    __extends(EditLabelMouseListener, _super);
    function EditLabelMouseListener() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EditLabelMouseListener.prototype.doubleClick = function (target, event) {
        var editableLabel = getEditableLabel(target);
        if (editableLabel) {
            return [new EditLabelAction(editableLabel.id)];
        }
        return [];
    };
    return EditLabelMouseListener;
}(mouse_tool_1.MouseListener));
exports.EditLabelMouseListener = EditLabelMouseListener;
var EditLabelKeyListener = /** @class */ (function (_super) {
    __extends(EditLabelKeyListener, _super);
    function EditLabelKeyListener() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EditLabelKeyListener.prototype.keyDown = function (element, event) {
        if (keyboard_1.matchesKeystroke(event, 'F2')) {
            var editableLabels = iterable_1.toArray(element.index.all()
                .filter(function (e) { return model_1.isSelectable(e) && e.selected; })).map(getEditableLabel)
                .filter(function (e) { return e !== undefined; });
            if (editableLabels.length === 1) {
                return [new EditLabelAction(editableLabels[0].id)];
            }
        }
        return [];
    };
    return EditLabelKeyListener;
}(key_tool_1.KeyListener));
exports.EditLabelKeyListener = EditLabelKeyListener;
function getEditableLabel(element) {
    if (model_2.isEditableLabel(element)) {
        return element;
    }
    else if (model_2.isWithEditableLabel(element) && element.editableLabel) {
        return element.editableLabel;
    }
    return undefined;
}
exports.getEditableLabel = getEditableLabel;
//# sourceMappingURL=edit-label.js.map