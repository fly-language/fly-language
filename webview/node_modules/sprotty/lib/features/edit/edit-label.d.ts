/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Action } from "../../base/actions/action";
import { CommandExecutionContext, CommandReturn, Command } from "../../base/commands/command";
import { SModelElement } from "../../base/model/smodel";
import { MouseListener } from "../../base/views/mouse-tool";
import { KeyListener } from "../../base/views/key-tool";
import { EditableLabel } from "./model";
export declare class EditLabelAction implements Action {
    readonly labelId: string;
    static KIND: string;
    kind: string;
    constructor(labelId: string);
}
export declare function isEditLabelAction(element?: any): element is EditLabelAction;
export declare class ApplyLabelEditAction implements Action {
    readonly labelId: string;
    readonly text: string;
    static readonly KIND = "applyLabelEdit";
    kind: string;
    constructor(labelId: string, text: string);
}
export declare class ResolvedLabelEdit {
    label: EditableLabel;
    oldLabel: string;
    newLabel: string;
}
export declare class ApplyLabelEditCommand extends Command {
    protected readonly action: ApplyLabelEditAction;
    static readonly KIND = "applyLabelEdit";
    protected resolvedLabelEdit: ResolvedLabelEdit;
    constructor(action: ApplyLabelEditAction);
    execute(context: CommandExecutionContext): CommandReturn;
    undo(context: CommandExecutionContext): CommandReturn;
    redo(context: CommandExecutionContext): CommandReturn;
}
export interface IEditLabelValidator {
    validate(value: string, label: EditableLabel & SModelElement): Promise<EditLabelValidationResult>;
}
export interface EditLabelValidationResult {
    readonly severity: Severity;
    readonly message?: string;
}
export declare type Severity = 'ok' | 'warning' | 'error';
export declare class EditLabelMouseListener extends MouseListener {
    doubleClick(target: SModelElement, event: MouseEvent): (Action | Promise<Action>)[];
}
export declare class EditLabelKeyListener extends KeyListener {
    keyDown(element: SModelElement, event: KeyboardEvent): Action[];
}
export declare function getEditableLabel(element: SModelElement): EditableLabel & SModelElement | undefined;
//# sourceMappingURL=edit-label.d.ts.map