/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { VNode } from "snabbdom/vnode";
import { IView, RenderingContext } from "../base/views/view";
import { ShapeView } from '../features/bounds/views';
import { SRoutingHandle } from '../features/routing/model';
import { EdgeRouterRegistry, RoutedPoint } from '../features/routing/routing';
import { RoutableView } from '../features/routing/views';
import { Point } from '../utils/geometry';
import { SCompartment, SEdge, SGraph, SLabel } from "./sgraph";
/**
 * IView component that turns an SGraph element and its children into a tree of virtual DOM elements.
 */
export declare class SGraphView implements IView {
    render(model: Readonly<SGraph>, context: RenderingContext): VNode;
}
export declare class PolylineEdgeView extends RoutableView {
    edgeRouterRegistry: EdgeRouterRegistry;
    render(edge: Readonly<SEdge>, context: RenderingContext): VNode | undefined;
    protected renderLine(edge: SEdge, segments: Point[], context: RenderingContext): VNode;
    protected renderAdditionals(edge: SEdge, segments: Point[], context: RenderingContext): VNode[];
    protected renderDanglingEdge(message: string, edge: SEdge, context: RenderingContext): VNode;
}
export declare class SRoutingHandleView implements IView {
    edgeRouterRegistry: EdgeRouterRegistry;
    minimalPointDistance: number;
    render(handle: Readonly<SRoutingHandle>, context: RenderingContext, args?: {
        route?: RoutedPoint[];
    }): VNode;
    getRadius(): number;
}
export declare class SLabelView extends ShapeView {
    render(label: Readonly<SLabel>, context: RenderingContext): VNode | undefined;
}
export declare class SCompartmentView implements IView {
    render(compartment: Readonly<SCompartment>, context: RenderingContext): VNode | undefined;
}
//# sourceMappingURL=views.d.ts.map