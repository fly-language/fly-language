"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var inversify_1 = require("inversify");
var registry_1 = require("../../utils/registry");
var command_1 = require("../commands/command");
var types_1 = require("../types");
/**
 * The registry maintaining UI extensions registered via `TYPES.IUIExtension`.
 */
var UIExtensionRegistry = /** @class */ (function (_super) {
    __extends(UIExtensionRegistry, _super);
    function UIExtensionRegistry(extensions) {
        if (extensions === void 0) { extensions = []; }
        var _this = _super.call(this) || this;
        extensions.forEach(function (extension) { return _this.register(extension.id(), extension); });
        return _this;
    }
    UIExtensionRegistry = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.multiInject(types_1.TYPES.IUIExtension)), __param(0, inversify_1.optional()),
        __metadata("design:paramtypes", [Array])
    ], UIExtensionRegistry);
    return UIExtensionRegistry;
}(registry_1.InstanceRegistry));
exports.UIExtensionRegistry = UIExtensionRegistry;
/**
 * Action to set the visibility state of the UI extension with the specified `id`.
 */
var SetUIExtensionVisibilityAction = /** @class */ (function () {
    function SetUIExtensionVisibilityAction(extensionId, visible, contextElementsId) {
        if (contextElementsId === void 0) { contextElementsId = []; }
        this.extensionId = extensionId;
        this.visible = visible;
        this.contextElementsId = contextElementsId;
        this.kind = SetUIExtensionVisibilityAction.KIND;
    }
    SetUIExtensionVisibilityAction.KIND = "setUIExtensionVisibility";
    return SetUIExtensionVisibilityAction;
}());
exports.SetUIExtensionVisibilityAction = SetUIExtensionVisibilityAction;
var SetUIExtensionVisibilityCommand = /** @class */ (function (_super) {
    __extends(SetUIExtensionVisibilityCommand, _super);
    function SetUIExtensionVisibilityCommand(action) {
        var _this = _super.call(this) || this;
        _this.action = action;
        return _this;
    }
    SetUIExtensionVisibilityCommand.prototype.execute = function (context) {
        var extension = this.registry.get(this.action.extensionId);
        if (extension) {
            this.action.visible ? extension.show.apply(extension, __spreadArrays([context.root], this.action.contextElementsId)) : extension.hide();
        }
        return { model: context.root, modelChanged: false };
    };
    SetUIExtensionVisibilityCommand.prototype.undo = function (context) {
        return { model: context.root, modelChanged: false };
    };
    SetUIExtensionVisibilityCommand.prototype.redo = function (context) {
        return { model: context.root, modelChanged: false };
    };
    SetUIExtensionVisibilityCommand.KIND = SetUIExtensionVisibilityAction.KIND;
    __decorate([
        inversify_1.inject(types_1.TYPES.UIExtensionRegistry),
        __metadata("design:type", UIExtensionRegistry)
    ], SetUIExtensionVisibilityCommand.prototype, "registry", void 0);
    SetUIExtensionVisibilityCommand = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(types_1.TYPES.Action)),
        __metadata("design:paramtypes", [SetUIExtensionVisibilityAction])
    ], SetUIExtensionVisibilityCommand);
    return SetUIExtensionVisibilityCommand;
}(command_1.SystemCommand));
exports.SetUIExtensionVisibilityCommand = SetUIExtensionVisibilityCommand;
//# sourceMappingURL=ui-extension-registry.js.map