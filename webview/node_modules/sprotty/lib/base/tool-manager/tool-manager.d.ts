import { Tool } from "./tool";
import { IActionHandler } from "../actions/action-handler";
import { Action } from "../actions/action";
import { ICommand } from "../commands/command";
import { KeyListener } from "../views/key-tool";
import { SModelElement } from "../model/smodel";
/**
 * A tool manager coordinates the state of tools in the context of an editor.
 *
 * One instance of a tool manager is intended per editor, coordinating the state of all tools within
 * this editor. A tool can be active or not. A tool manager ensures that activating a set of tools
 * will disable all other tools, allowing them to invoke behavior when they become enabled or disabled.
 */
export interface IToolManager {
    /** All tools managed by this tool manager. */
    readonly managedTools: Tool[];
    /** The tools that are enabled by default, whenever no other tool is enabled. */
    readonly defaultTools: Tool[];
    /** The currently active tools, which are either specifically enabled tools, or the default tools. */
    readonly activeTools: Tool[];
    /**
     * Enables the tools with the specified `toolIds`.
     * Therefore, this manager first disables currently active tools and then enable the
     * tools indicated in `toolIds`, making them the currently active tools. If this manager
     * doesn't manage one or more tools specified in `toolIds`, it'll do nothing. If not a
     * single tool that shall be enabled was found in the managed tools, it'll fall back to
     * the default tools.
     *
     * @param tools The tools to be enabled.
     */
    enable(toolIds: string[]): void;
    /**
     * Enables all default tools.
     */
    enableDefaultTools(): void;
    /** Disables all currently active tools. After this call, no tool will be active anymore. */
    disableActiveTools(): void;
    registerDefaultTools(...tools: Tool[]): void;
    registerTools(...tools: Tool[]): void;
}
export declare class ToolManager implements IToolManager {
    readonly tools: Tool[];
    readonly defaultTools: Tool[];
    readonly actives: Tool[];
    get managedTools(): Tool[];
    get activeTools(): Tool[];
    disableActiveTools(): void;
    enableDefaultTools(): void;
    enable(toolIds: string[]): void;
    tool(toolId: string): Tool | undefined;
    registerDefaultTools(...tools: Tool[]): void;
    registerTools(...tools: Tool[]): void;
}
export declare class ToolManagerActionHandler implements IActionHandler {
    readonly toolManager: IToolManager;
    handle(action: Action): void | ICommand | Action;
}
export declare class DefaultToolsEnablingKeyListener extends KeyListener {
    keyDown(element: SModelElement, event: KeyboardEvent): Action[];
}
//# sourceMappingURL=tool-manager.d.ts.map