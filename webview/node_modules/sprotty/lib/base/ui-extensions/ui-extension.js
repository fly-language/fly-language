"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var inversify_1 = require("inversify");
var types_1 = require("../types");
/**
 * Abstract base class for UI extensions.
 */
var AbstractUIExtension = /** @class */ (function () {
    function AbstractUIExtension() {
    }
    AbstractUIExtension.prototype.show = function (root) {
        var contextElementIds = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            contextElementIds[_i - 1] = arguments[_i];
        }
        this.activeElement = document.activeElement;
        if (!this.containerElement) {
            if (!this.initialize())
                return;
        }
        this.onBeforeShow.apply(this, __spreadArrays([this.containerElement, root], contextElementIds));
        this.setContainerVisible(true);
    };
    AbstractUIExtension.prototype.hide = function () {
        this.setContainerVisible(false);
        this.restoreFocus();
        this.activeElement = null;
    };
    AbstractUIExtension.prototype.restoreFocus = function () {
        var focusedElement = this.activeElement;
        if (focusedElement) {
            focusedElement.focus();
        }
    };
    AbstractUIExtension.prototype.initialize = function () {
        var baseDiv = document.getElementById(this.options.baseDiv);
        if (!baseDiv) {
            this.logger.warn(this, "Could not obtain sprotty base container for initializing UI extension " + this.id, this);
            return false;
        }
        this.containerElement = this.getOrCreateContainer(baseDiv.id);
        this.initializeContents(this.containerElement);
        if (baseDiv) {
            baseDiv.insertBefore(this.containerElement, baseDiv.firstChild);
        }
        return true;
    };
    AbstractUIExtension.prototype.getOrCreateContainer = function (baseDivId) {
        var container = document.getElementById(this.id());
        if (container === null) {
            container = document.createElement('div');
            container.id = baseDivId + "_" + this.id();
            container.classList.add(this.containerClass());
        }
        return container;
    };
    AbstractUIExtension.prototype.setContainerVisible = function (visible) {
        if (this.containerElement) {
            if (visible) {
                this.containerElement.style.visibility = 'visible';
                this.containerElement.style.opacity = '1';
            }
            else {
                this.containerElement.style.visibility = 'hidden';
                this.containerElement.style.opacity = '0';
            }
        }
    };
    /**
     * Updates the `containerElement` under the given `context` before it becomes visible.
     *
     * Subclasses may override this method to, for instance, modifying the position of the
     * `containerElement`, add or remove elements, etc. depending on the specified `root`
     * or `contextElementIds`.
     */
    AbstractUIExtension.prototype.onBeforeShow = function (containerElement, root) {
        var contextElementIds = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            contextElementIds[_i - 2] = arguments[_i];
        }
        // default: do nothing
    };
    __decorate([
        inversify_1.inject(types_1.TYPES.ViewerOptions),
        __metadata("design:type", Object)
    ], AbstractUIExtension.prototype, "options", void 0);
    __decorate([
        inversify_1.inject(types_1.TYPES.ILogger),
        __metadata("design:type", Object)
    ], AbstractUIExtension.prototype, "logger", void 0);
    AbstractUIExtension = __decorate([
        inversify_1.injectable()
    ], AbstractUIExtension);
    return AbstractUIExtension;
}());
exports.AbstractUIExtension = AbstractUIExtension;
//# sourceMappingURL=ui-extension.js.map