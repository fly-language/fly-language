/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Bounds, Point } from "../../utils/geometry";
import { SModelElement, SModelRoot, SModelRootSchema } from "../../base/model/smodel";
import { MouseListener } from "../../base/views/mouse-tool";
import { Action, RequestAction, ResponseAction } from "../../base/actions/action";
import { CommandExecutionContext, PopupCommand, SystemCommand, CommandReturn, ICommand } from "../../base/commands/command";
import { IActionHandler } from "../../base/actions/action-handler";
import { KeyListener } from "../../base/views/key-tool";
import { ViewerOptions } from "../../base/views/viewer-options";
/**
 * Triggered when the user puts the mouse pointer over an element.
 */
export declare class HoverFeedbackAction implements Action {
    readonly mouseoverElement: string;
    readonly mouseIsOver: boolean;
    static readonly KIND = "hoverFeedback";
    kind: string;
    constructor(mouseoverElement: string, mouseIsOver: boolean);
}
export declare class HoverFeedbackCommand extends SystemCommand {
    protected readonly action: HoverFeedbackAction;
    static readonly KIND = "hoverFeedback";
    constructor(action: HoverFeedbackAction);
    execute(context: CommandExecutionContext): CommandReturn;
    undo(context: CommandExecutionContext): CommandReturn;
    redo(context: CommandExecutionContext): CommandReturn;
}
/**
 * Triggered when the user hovers the mouse pointer over an element to get a popup with details on
 * that element. This action is sent from the client to the model source, e.g. a DiagramServer.
 * The response is a SetPopupModelAction.
 */
export declare class RequestPopupModelAction implements RequestAction<SetPopupModelAction> {
    readonly elementId: string;
    readonly bounds: Bounds;
    readonly requestId: string;
    static readonly KIND = "requestPopupModel";
    readonly kind = "requestPopupModel";
    constructor(elementId: string, bounds: Bounds, requestId?: string);
    /** Factory function to dispatch a request with the `IActionDispatcher` */
    static create(elementId: string, bounds: Bounds): RequestAction<SetPopupModelAction>;
}
/**
 * Sent from the model source to the client to display a popup in response to a RequestPopupModelAction.
 * This action can also be used to remove any existing popup by choosing EMPTY_ROOT as root element.
 */
export declare class SetPopupModelAction implements ResponseAction {
    readonly newRoot: SModelRootSchema;
    readonly responseId: string;
    static readonly KIND = "setPopupModel";
    readonly kind = "setPopupModel";
    constructor(newRoot: SModelRootSchema, responseId?: string);
}
export declare class SetPopupModelCommand extends PopupCommand {
    protected readonly action: SetPopupModelAction;
    static readonly KIND = "setPopupModel";
    oldRoot: SModelRoot;
    newRoot: SModelRoot;
    constructor(action: SetPopupModelAction);
    execute(context: CommandExecutionContext): CommandReturn;
    undo(context: CommandExecutionContext): CommandReturn;
    redo(context: CommandExecutionContext): CommandReturn;
}
export interface HoverState {
    mouseOverTimer: number | undefined;
    mouseOutTimer: number | undefined;
    popupOpen: boolean;
    previousPopupElement: SModelElement | undefined;
}
export declare abstract class AbstractHoverMouseListener extends MouseListener {
    protected mouseIsDown: boolean;
    protected options: ViewerOptions;
    protected state: HoverState;
    mouseDown(target: SModelElement, event: MouseEvent): (Action | Promise<Action>)[];
    mouseUp(target: SModelElement, event: MouseEvent): (Action | Promise<Action>)[];
    protected stopMouseOutTimer(): void;
    protected startMouseOutTimer(): Promise<Action>;
    protected stopMouseOverTimer(): void;
}
export declare class HoverMouseListener extends AbstractHoverMouseListener {
    protected lastHoverFeedbackElementId?: string;
    protected options: ViewerOptions;
    protected computePopupBounds(target: SModelElement, mousePosition: Point): Bounds;
    protected allowSidePosition(target: SModelElement, side: 'above' | 'below' | 'left' | 'right', distance: number): boolean;
    protected startMouseOverTimer(target: SModelElement, event: MouseEvent): Promise<Action>;
    mouseOver(target: SModelElement, event: MouseEvent): (Action | Promise<Action>)[];
    mouseOut(target: SModelElement, event: MouseEvent): (Action | Promise<Action>)[];
    protected isSprottyPopup(element: Element | null): boolean;
    mouseMove(target: SModelElement, event: MouseEvent): (Action | Promise<Action>)[];
    protected closeOnMouseMove(target: SModelElement, event: MouseEvent): boolean;
}
export declare class PopupHoverMouseListener extends AbstractHoverMouseListener {
    mouseOut(target: SModelElement, event: MouseEvent): (Action | Promise<Action>)[];
    mouseOver(target: SModelElement, event: MouseEvent): (Action | Promise<Action>)[];
}
export declare class HoverKeyListener extends KeyListener {
    keyDown(element: SModelElement, event: KeyboardEvent): Action[];
}
export declare class ClosePopupActionHandler implements IActionHandler {
    protected popupOpen: boolean;
    handle(action: Action): void | ICommand | Action;
}
//# sourceMappingURL=hover.d.ts.map