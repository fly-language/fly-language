grammar org.xtext.FLY with org.eclipse.xtext.common.Terminals 

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate fLY "http://www.xtext.org/FLY"

Fly:
	elements+=Expression*
;

Expression returns Expression:
	Assignment 			|
	BlockExpression 	|
	IfExpression 		|
	ForExpression 		|
	WhileExpression 	|
	PrintExpression 	|
	FunctionDefinition 	|
	FunctionReturn 		|
	FlyFunctionCall 	|
	VariableDeclaration |
	ChannelSend 		|
	ChannelReceive 		|
	LocalFunctionCall 	|
	SortExpression 		|
	VariableFunction	|
	PostfixOperation	|
	RequireExpression 	|
	NativeExpression	
;

SortExpression:
	'sort' type=('asc' | 'desc') target=[VariableDeclaration] 'on' taget=ID
;

Assignment:
	{Assignment} feature=VariableLiteral op=OpAs value=ArithmeticExpression | 
	{Assignment} feature_obj=ObjectLiteral op=OpAs value=ArithmeticExpression 
;

OpAs:
	'='	| 
	'+='
;

PrintExpression :
	{PrintExpression} 'println' print = ArithmeticExpression 
;

IfExpression:
	{IfExpression} 	'if' '(' cond=ArithmeticExpression ')' then=Expression (=>'else' else=Expression)?
;

ForExpression:
	{ForExpression}
	'for' index=ForIndex 'in' object=ArithmeticExpression ('by' delimeter=ForDelimeter )? body=Expression 
;

ForDelimeter:
	type='row' | 
	type='col' |
	type='delimeter' del=STRING
;

ForIndex:
	 indices+=VariableFor (',' indices+=VariableFor )*
;

VariableFor:
	{VariableDeclaration} name=ID
;


WhileExpression:
	{WhileExpression}
	'while' '(' cond=ArithmeticExpression ')' body=Expression
;

BlockExpression:
	{BlockExpression}
	'{' expressions+=Expression* '}'
;

VariableDeclaration:
	{VariableDeclaration} typeobject='var' =>(name=ID '=' (right=ArithmeticExpression | right=FlyFunctionCall | right=DeclarationObject | right=Object)) (onCloud?='on' environment+=[VariableDeclaration] (',' environment+=[VariableDeclaration])* )? |
	{ConstantDeclaration} typeobject='const' =>(name = ID '='  (right=ArithmeticExpression | right=Object ))														
;

Object:
	{NameObjectDef}  '{' (features+=FeautureName)? (',' features+=FeautureName)* '}' |
	{ArrayDefinition} type=Type indexes+=Index(indexes+=Index)*    		 |
	{ArrayInit}		'[' values+=(ArrayValue)? (',' values+=(ArrayValue))* ']'
;

Index:
	"[" value=ArithmeticExpression "]" 
;

ArrayValue:
	{ArrayValue} '['(values+=ArrayValue)? (',' values+=ArrayValue)* ']' |
	ArithmeticExpression
;

DeclarationObject:
	{DeclarationObject} '[' features+=DeclarationFeature (',' features+=DeclarationFeature)* ']'
;

DeclarationFeature:
	{DeclarationFeature} feature=ID '=' (value_f= [VariableDeclaration] | value_s=STRING | value_t=INT | value_b=BooleanLiteral)	
;

FeautureName:
	feature=ID '=' value=ArithmeticExpression 	| 
	value=ArithmeticExpression |
	Object;

ObjectLiteral:
	{NameObject} name=[VariableDeclaration] "." value=ID																						| 
	{IndexObject} name=[VariableDeclaration] indexes+=SubIndex (indexes+=SubIndex)*																	| 
	{DatSingleObject} name=[VariableDeclaration] "["(value1=(NumberLiteral | StringLiteral)) "," (value2=(NumberLiteral|StringLiteral)) "]"			|
	{DatTableObject} name=[VariableDeclaration] "[" (range1=RangeLiteral | range1_t=NumberLiteral) "," (range2=RangeLiteral) "]"
;

SubIndex:
	"[" value=ArithmeticExpression (":" value2=ArithmeticExpression)? "]" 
;

RangeLiteral:
	{RangeLiteral} "[" (value1=INT | value_l1=[VariableDeclaration]) ":" (value2=INT | value_l2=[VariableDeclaration]) "]" 
;

MathFunction:
	{MathFunction} 'Math' '.' feature=ID '(' expressions+=ArithmeticExpression? (',' expressions+=ArithmeticExpression)* ')';

VariableFunction:
	{VariableFunction} target=[VariableDeclaration] '.' feature=ID '(' expressions+=ArithmeticExpression? (',' expressions+=ArithmeticExpression)* ')'
;	

FunctionReturn:
	{FunctionReturn} 'return' expression=ArithmeticExpression
;

FunctionDefinition:
	{FunctionDefinition}
	'func' name=ID '(' parameters+=Params? (',' parameters+=Params)* ')' body=BlockExpression
;

Params returns Expression:
	{VariableDeclaration} name=ID
;

ChannelSend:
	{ChannelSend}
	target=[VariableDeclaration] '!' expression=ArithmeticExpression 'on' envirnment=[VariableDeclaration]
;

ChannelReceive:
	{ChannelReceive} target=[VariableDeclaration]'?'
;


LocalFunctionCall:
	{LocalFunctionCall} target=[FunctionDefinition]  '(' input=LocalFunctionInput ')'
;

LocalFunctionInput:
	{LocalFunctionInput} inputs+=ArithmeticExpression? (',' inputs+=ArithmeticExpression)* 
;

FlyFunctionCall:
	{FlyFunctionCall} (isAsync?='async')? 'fly' target=[FunctionDefinition]  
	input=FunctionInput? 'on' environment=[VariableDeclaration] (is_then?='then' then=[FunctionDefinition])? (is_thenall?='thenall' thenall=[FunctionDefinition])? 
;

FunctionInput:
	{FunctionInput} '(' expressions+=ArithmeticExpression? (',' expressions+=ArithmeticExpression)* ')' | 
	{FunctionInput} is_for_index?='in' f_index=ArithmeticExpression (is_split_by?='by' split=('row'|'col'|'square') )?
;

NativeExpression:
	{NativeExpression} 'native' code=NATIVE_CODE  
;

RequireExpression:
	{RequireExpression} 'require' '(' lib = STRING ')' 'on' environment=[VariableDeclaration]
;

PostfixOperation:
	variable=VariableLiteral feature=OpPostfix
;

OpPostfix:
	'++' | '--'
;

//rules for Aritmethic Expression

ArithmeticExpression returns ArithmeticExpression:
	OrExpression
;

OrExpression returns ArithmeticExpression:
	AndExpression (=>({BinaryOperation.left=current} feature=OpOr) right=AndExpression)*
;

OpOr:
	'or'
;

AndExpression returns ArithmeticExpression:
	EqualityExpression (=>({BinaryOperation.left=current} feature=OpAnd) right=EqualityExpression)*
;

OpAnd:
	'and'
;

EqualityExpression returns ArithmeticExpression:
	RelationalExpression (=>({BinaryOperation.left=current} feature=OpEquality) right=RelationalExpression)*	
;

OpEquality:
	'==' | '!='
;

RelationalExpression returns ArithmeticExpression:
	AdditiveExpression (=>({BinaryOperation.left=current} feature=OpCompare) right=AdditiveExpression)*
;

OpCompare:
	'>=' | '<=' | '<' | '>'
;

AdditiveExpression returns ArithmeticExpression:
	MultiplicativeExpression (=>({BinaryOperation.left=current} feature=OpAdd) right=MultiplicativeExpression)*
;

OpAdd:
	'+' | '-'
;

MultiplicativeExpression returns ArithmeticExpression:
	UnaryOperation (=>({BinaryOperation.left=current} feature=OpMulti) right=UnaryOperation)*
;

OpMulti:
	'*' | '/'
;

UnaryOperation returns ArithmeticExpression:
	{UnaryOperation} feature=OpUnary operand=UnaryOperation |
	CastExpression
;

OpUnary:
	'not' | '-' | '+'
;

CastExpression returns ArithmeticExpression:
	PrimaryExpression (=>({CastExpression.target=current} op=('as' | 'parse') ) type=Type)*
;

Type:
	'String' | 'Integer' | 'Date' | 'Dat' | 'Object'  | 'Double' | 'Matrix' | 'ArrayList' | 'Array'
;


PrimaryExpression returns ArithmeticExpression:
	ParenthesizedExpression	|
	LiteralExpression 		|
	LocalFunctionCall 		|
	MathFunction			|
	ChannelSend 			|
	ChannelReceive 			|
	TimeFunction			|
	VariableFunction		
;

LiteralExpression returns ArithmeticExpression:
	BooleanLiteral 	|
	NumberLiteral 	|
	StringLiteral 	|
	ObjectLiteral 	|
	VariableLiteral |
	RangeLiteral 	|
	FloatLiteral	|
	EnviromentLiteral
;

EnviromentLiteral:
	{EnvironemtLiteral} 'execution_environment'
;

TimeFunction returns ArithmeticExpression:
	{TimeFunction} 'time' '(' (value = [VariableDeclaration] )* ')' 
;

BooleanLiteral returns ArithmeticExpression:
	{BooleanLiteral} value="false" | {BooleanLiteral} value="true"
;

NumberLiteral returns ArithmeticExpression:
	{NumberLiteral} value=INT
;

StringLiteral returns ArithmeticExpression:
	{StringLiteral} value=STRING
;

FloatLiteral returns ArithmeticExpression:
	{FloatLiteral} value=FLOAT
;


VariableLiteral returns ArithmeticExpression:
	{VariableLiteral} variable=[VariableDeclaration]  
;

ParenthesizedExpression returns ArithmeticExpression:
	{ParenthesizedExpression}
	'(' expression=ArithmeticExpression')'
;

terminal FLOAT returns ecore::EFloat:
	INT '.' INT;
	
terminal NATIVE_CODE: '<<<' -> '>>>';

@Override 
terminal ID:
	('a'..'z'|'A'..'Z'|'$') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*
;