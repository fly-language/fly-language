"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var action_1 = require("../../base/actions/action");
var types_1 = require("../../base/types");
var ui_extension_1 = require("../../base/ui-extensions/ui-extension");
var ui_extension_registry_1 = require("../../base/ui-extensions/ui-extension-registry");
var dom_helper_1 = require("../../base/views/dom-helper");
var key_tool_1 = require("../../base/views/key-tool");
var iterable_1 = require("../../utils/iterable");
var keyboard_1 = require("../../utils/keyboard");
var model_1 = require("../bounds/model");
var model_2 = require("../select/model");
var action_providers_1 = require("./action-providers");
var mouse_tool_1 = require("../../base/views/mouse-tool");
// import of function autocomplete(...) doesn't work
// see also https://github.com/kraaden/autocomplete/issues/13
// this is a workaround to still get the function including type support
var configureAutocomplete = require("autocompleter");
var CommandPalette = /** @class */ (function (_super) {
    __extends(CommandPalette, _super);
    function CommandPalette() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.loadingIndicatorClasses = ['loading'];
        _this.xOffset = 20;
        _this.yOffset = 20;
        _this.defaultWidth = 400;
        _this.debounceWaitMs = 100;
        _this.noCommandsMsg = "No commands available";
        _this.paletteIndex = 0;
        return _this;
    }
    CommandPalette_1 = CommandPalette;
    CommandPalette.prototype.id = function () { return CommandPalette_1.ID; };
    CommandPalette.prototype.containerClass = function () { return "command-palette"; };
    CommandPalette.prototype.show = function (root) {
        var contextElementIds = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            contextElementIds[_i - 1] = arguments[_i];
        }
        _super.prototype.show.apply(this, __spreadArrays([root], contextElementIds));
        this.paletteIndex = 0;
        this.contextActions = undefined;
        this.inputElement.value = "";
        this.autoCompleteResult = configureAutocomplete(this.autocompleteSettings(root));
        this.inputElement.focus();
    };
    CommandPalette.prototype.initializeContents = function (containerElement) {
        var _this = this;
        containerElement.style.position = "absolute";
        this.inputElement = document.createElement('input');
        this.inputElement.style.width = '100%';
        this.inputElement.addEventListener('keydown', function (event) { return _this.hideIfEscapeEvent(event); });
        this.inputElement.addEventListener('keydown', function (event) { return _this.cylceIfInvokePaletteKey(event); });
        this.inputElement.onblur = function () { return window.setTimeout(function () { return _this.hide(); }, 200); };
        containerElement.appendChild(this.inputElement);
    };
    CommandPalette.prototype.hideIfEscapeEvent = function (event) {
        if (keyboard_1.matchesKeystroke(event, 'Escape')) {
            this.hide();
        }
    };
    CommandPalette.prototype.cylceIfInvokePaletteKey = function (event) {
        if (CommandPalette_1.isInvokePaletteKey(event)) {
            this.cycle();
        }
    };
    CommandPalette.prototype.cycle = function () {
        this.contextActions = undefined;
        this.paletteIndex++;
    };
    CommandPalette.prototype.onBeforeShow = function (containerElement, root) {
        var selectedElementIds = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            selectedElementIds[_i - 2] = arguments[_i];
        }
        var x = this.xOffset;
        var y = this.yOffset;
        var selectedElements = iterable_1.toArray(root.index.all().filter(function (e) { return model_2.isSelectable(e) && e.selected; }));
        if (selectedElements.length === 1) {
            var bounds = model_1.getAbsoluteClientBounds(selectedElements[0], this.domHelper, this.viewerOptions);
            x += bounds.x + bounds.width;
            y += bounds.y;
        }
        else {
            var bounds = model_1.getAbsoluteClientBounds(root, this.domHelper, this.viewerOptions);
            x += bounds.x;
            y += bounds.y;
        }
        containerElement.style.left = x + "px";
        containerElement.style.top = y + "px";
        containerElement.style.width = this.defaultWidth + "px";
    };
    CommandPalette.prototype.autocompleteSettings = function (root) {
        var _this = this;
        return {
            input: this.inputElement,
            emptyMsg: this.noCommandsMsg,
            className: "command-palette-suggestions",
            debounceWaitMs: this.debounceWaitMs,
            showOnFocus: true,
            minLength: -1,
            fetch: function (text, update) {
                return _this.updateAutoCompleteActions(update, text, root);
            },
            onSelect: function (item) { return _this.onSelect(item); },
            render: function (item, currentValue) {
                return _this.renderLabeledActionSuggestion(item, currentValue);
            },
            customize: function (input, inputRect, container, maxHeight) {
                _this.customizeSuggestionContainer(container, inputRect, maxHeight);
            }
        };
    };
    CommandPalette.prototype.onSelect = function (item) {
        this.executeAction(item);
        this.hide();
    };
    CommandPalette.prototype.updateAutoCompleteActions = function (update, text, root) {
        var _this = this;
        this.onLoading();
        if (this.contextActions) {
            update(this.filterActions(text, this.contextActions));
            this.onLoaded('success');
        }
        else {
            this.actionProviderRegistry
                .getActions(root, text, this.mousePositionTracker.lastPositionOnDiagram, this.paletteIndex)
                .then(function (actions) {
                _this.contextActions = actions;
                update(_this.filterActions(text, actions));
                _this.onLoaded('success');
            })
                .catch(function (reason) {
                _this.logger.error(_this, "Failed to obtain actions from command palette action providers", reason);
                _this.onLoaded('error');
            });
        }
    };
    CommandPalette.prototype.onLoading = function () {
        var _a;
        if (this.loadingIndicator && this.containerElement.contains(this.loadingIndicator)) {
            return;
        }
        this.loadingIndicator = document.createElement('span');
        (_a = this.loadingIndicator.classList).add.apply(_a, this.loadingIndicatorClasses);
        this.containerElement.appendChild(this.loadingIndicator);
    };
    CommandPalette.prototype.onLoaded = function (success) {
        if (this.containerElement.contains(this.loadingIndicator)) {
            this.containerElement.removeChild(this.loadingIndicator);
        }
    };
    CommandPalette.prototype.renderLabeledActionSuggestion = function (item, value) {
        var itemElement = document.createElement("div");
        var wordMatcher = espaceForRegExp(value).split(" ").join("|");
        var regex = new RegExp(wordMatcher, "gi");
        if (item.icon) {
            this.renderIcon(itemElement, item.icon);
        }
        itemElement.innerHTML += item.label.replace(regex, function (match) { return "<em>" + match + "</em>"; });
        return itemElement;
    };
    CommandPalette.prototype.renderIcon = function (itemElement, icon) {
        itemElement.innerHTML += "<span class=\"icon fa " + icon + "\"></span>";
    };
    CommandPalette.prototype.filterActions = function (filterText, actions) {
        return iterable_1.toArray(actions.filter(function (action) {
            var label = action.label.toLowerCase();
            var searchWords = filterText.split(' ');
            return searchWords.every(function (word) { return label.indexOf(word.toLowerCase()) !== -1; });
        }));
    };
    CommandPalette.prototype.customizeSuggestionContainer = function (container, inputRect, maxHeight) {
        // move container into our command palette container as this is already positioned correctly
        if (this.containerElement) {
            this.containerElement.appendChild(container);
        }
    };
    CommandPalette.prototype.hide = function () {
        _super.prototype.hide.call(this);
        if (this.autoCompleteResult) {
            this.autoCompleteResult.destroy();
        }
    };
    CommandPalette.prototype.executeAction = function (input) {
        var _this = this;
        this.actionDispatcherProvider()
            .then(function (actionDispatcher) { return actionDispatcher.dispatchAll(toActionArray(input)); })
            .catch(function (reason) { return _this.logger.error(_this, 'No action dispatcher available to execute command palette action', reason); });
    };
    var CommandPalette_1;
    CommandPalette.ID = "command-palette";
    CommandPalette.isInvokePaletteKey = function (event) { return keyboard_1.matchesKeystroke(event, 'Space', 'ctrl'); };
    __decorate([
        inversify_1.inject(types_1.TYPES.IActionDispatcherProvider),
        __metadata("design:type", Function)
    ], CommandPalette.prototype, "actionDispatcherProvider", void 0);
    __decorate([
        inversify_1.inject(types_1.TYPES.ICommandPaletteActionProviderRegistry),
        __metadata("design:type", action_providers_1.CommandPaletteActionProviderRegistry)
    ], CommandPalette.prototype, "actionProviderRegistry", void 0);
    __decorate([
        inversify_1.inject(types_1.TYPES.ViewerOptions),
        __metadata("design:type", Object)
    ], CommandPalette.prototype, "viewerOptions", void 0);
    __decorate([
        inversify_1.inject(types_1.TYPES.DOMHelper),
        __metadata("design:type", dom_helper_1.DOMHelper)
    ], CommandPalette.prototype, "domHelper", void 0);
    __decorate([
        inversify_1.inject(mouse_tool_1.MousePositionTracker),
        __metadata("design:type", mouse_tool_1.MousePositionTracker)
    ], CommandPalette.prototype, "mousePositionTracker", void 0);
    CommandPalette = CommandPalette_1 = __decorate([
        inversify_1.injectable()
    ], CommandPalette);
    return CommandPalette;
}(ui_extension_1.AbstractUIExtension));
exports.CommandPalette = CommandPalette;
function toActionArray(input) {
    if (action_1.isLabeledAction(input)) {
        return input.actions;
    }
    else if (action_1.isAction(input)) {
        return [input];
    }
    return [];
}
function espaceForRegExp(value) {
    return value.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
}
var CommandPaletteKeyListener = /** @class */ (function (_super) {
    __extends(CommandPaletteKeyListener, _super);
    function CommandPaletteKeyListener() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CommandPaletteKeyListener.prototype.keyDown = function (element, event) {
        if (keyboard_1.matchesKeystroke(event, 'Escape')) {
            return [new ui_extension_registry_1.SetUIExtensionVisibilityAction(CommandPalette.ID, false, [])];
        }
        else if (CommandPalette.isInvokePaletteKey(event)) {
            var selectedElements = iterable_1.toArray(element.index.all().filter(function (e) { return model_2.isSelectable(e) && e.selected; }).map(function (e) { return e.id; }));
            return [new ui_extension_registry_1.SetUIExtensionVisibilityAction(CommandPalette.ID, true, selectedElements)];
        }
        return [];
    };
    return CommandPaletteKeyListener;
}(key_tool_1.KeyListener));
exports.CommandPaletteKeyListener = CommandPaletteKeyListener;
//# sourceMappingURL=command-palette.js.map