/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { VNode } from "snabbdom/vnode";
import { ILogger } from "../../utils/logging";
import { Bounds, Point } from '../../utils/geometry';
import { Action } from "../../base/actions/action";
import { IActionDispatcher } from "../../base/actions/action-dispatcher";
import { SModelElement, SModelRoot } from "../../base/model/smodel";
import { IVNodePostprocessor } from "../../base/views/vnode-postprocessor";
import { Layouter } from "./layout";
import { BoundsAware } from "./model";
export declare class BoundsData {
    vnode?: VNode;
    bounds?: Bounds;
    alignment?: Point;
    boundsChanged: boolean;
    alignmentChanged: boolean;
}
/**
 * Grabs the bounds from hidden SVG DOM elements, applies layouts and fires
 * ComputedBoundsActions.
 *
 * The actual bounds of an element can usually not be determined from the SModel
 * as they depend on the view implementation and CSS stylings. So the best way is
 * to grab them from a live (but hidden) SVG using getBBox().
 *
 * If an element is Alignable, and the top-left corner of its bounding box is not
 * the origin, we also issue a realign with the ComputedBoundsAction.
 */
export declare class HiddenBoundsUpdater implements IVNodePostprocessor {
    protected logger: ILogger;
    protected actionDispatcher: IActionDispatcher;
    protected layouter: Layouter;
    private readonly element2boundsData;
    root: SModelRoot | undefined;
    decorate(vnode: VNode, element: SModelElement): VNode;
    postUpdate(cause?: Action): void;
    protected getBoundsFromDOM(): void;
    protected getBounds(elm: any, element: BoundsAware): Bounds;
}
//# sourceMappingURL=hidden-bounds-updater.d.ts.map