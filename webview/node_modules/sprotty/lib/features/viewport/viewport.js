"use strict";
/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var geometry_1 = require("../../utils/geometry");
var action_1 = require("../../base/actions/action");
var command_1 = require("../../base/commands/command");
var animation_1 = require("../../base/animations/animation");
var model_1 = require("./model");
var inversify_1 = require("inversify");
var types_1 = require("../../base/types");
var request_command_1 = require("../../base/commands/request-command");
var SetViewportAction = /** @class */ (function () {
    function SetViewportAction(elementId, newViewport, animate) {
        this.elementId = elementId;
        this.newViewport = newViewport;
        this.animate = animate;
        this.kind = SetViewportAction.KIND;
    }
    SetViewportAction.KIND = 'viewport';
    return SetViewportAction;
}());
exports.SetViewportAction = SetViewportAction;
/**
 * Request action for retrieving the current viewport and canvas bounds.
 */
var GetViewportAction = /** @class */ (function () {
    function GetViewportAction(requestId) {
        if (requestId === void 0) { requestId = ''; }
        this.requestId = requestId;
        this.kind = GetViewportAction.KIND;
    }
    /** Factory function to dispatch a request with the `IActionDispatcher` */
    GetViewportAction.create = function () {
        return new GetViewportAction(action_1.generateRequestId());
    };
    GetViewportAction.KIND = 'getViewport';
    return GetViewportAction;
}());
exports.GetViewportAction = GetViewportAction;
var ViewportResult = /** @class */ (function () {
    function ViewportResult(viewport, canvasBounds, responseId) {
        this.viewport = viewport;
        this.canvasBounds = canvasBounds;
        this.responseId = responseId;
        this.kind = ViewportResult.KIND;
    }
    ViewportResult.KIND = 'viewportResult';
    return ViewportResult;
}());
exports.ViewportResult = ViewportResult;
var SetViewportCommand = /** @class */ (function (_super) {
    __extends(SetViewportCommand, _super);
    function SetViewportCommand(action) {
        var _this = _super.call(this) || this;
        _this.action = action;
        _this.newViewport = action.newViewport;
        return _this;
    }
    SetViewportCommand_1 = SetViewportCommand;
    SetViewportCommand.prototype.execute = function (context) {
        var model = context.root;
        var element = model.index.getById(this.action.elementId);
        if (element && model_1.isViewport(element)) {
            this.element = element;
            this.oldViewport = {
                scroll: this.element.scroll,
                zoom: this.element.zoom,
            };
            if (this.action.animate)
                return new ViewportAnimation(this.element, this.oldViewport, this.newViewport, context).start();
            else {
                this.element.scroll = this.newViewport.scroll;
                this.element.zoom = this.newViewport.zoom;
            }
        }
        return model;
    };
    SetViewportCommand.prototype.undo = function (context) {
        return new ViewportAnimation(this.element, this.newViewport, this.oldViewport, context).start();
    };
    SetViewportCommand.prototype.redo = function (context) {
        return new ViewportAnimation(this.element, this.oldViewport, this.newViewport, context).start();
    };
    SetViewportCommand.prototype.merge = function (command, context) {
        if (!this.action.animate && command instanceof SetViewportCommand_1 && this.element === command.element) {
            this.newViewport = command.newViewport;
            return true;
        }
        return false;
    };
    var SetViewportCommand_1;
    SetViewportCommand.KIND = SetViewportAction.KIND;
    SetViewportCommand = SetViewportCommand_1 = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(types_1.TYPES.Action)),
        __metadata("design:paramtypes", [SetViewportAction])
    ], SetViewportCommand);
    return SetViewportCommand;
}(command_1.MergeableCommand));
exports.SetViewportCommand = SetViewportCommand;
var GetViewportCommand = /** @class */ (function (_super) {
    __extends(GetViewportCommand, _super);
    function GetViewportCommand(action) {
        var _this = _super.call(this) || this;
        _this.action = action;
        return _this;
    }
    GetViewportCommand.prototype.retrieveResult = function (context) {
        var elem = context.root;
        var viewport;
        if (model_1.isViewport(elem)) {
            viewport = { scroll: elem.scroll, zoom: elem.zoom };
        }
        else {
            viewport = { scroll: geometry_1.ORIGIN_POINT, zoom: 1 };
        }
        return new ViewportResult(viewport, elem.canvasBounds, this.action.requestId);
    };
    GetViewportCommand.KIND = GetViewportAction.KIND;
    GetViewportCommand = __decorate([
        __param(0, inversify_1.inject(types_1.TYPES.Action)),
        __metadata("design:paramtypes", [GetViewportAction])
    ], GetViewportCommand);
    return GetViewportCommand;
}(request_command_1.ModelRequestCommand));
exports.GetViewportCommand = GetViewportCommand;
var ViewportAnimation = /** @class */ (function (_super) {
    __extends(ViewportAnimation, _super);
    function ViewportAnimation(element, oldViewport, newViewport, context) {
        var _this = _super.call(this, context) || this;
        _this.element = element;
        _this.oldViewport = oldViewport;
        _this.newViewport = newViewport;
        _this.context = context;
        _this.zoomFactor = Math.log(newViewport.zoom / oldViewport.zoom);
        return _this;
    }
    ViewportAnimation.prototype.tween = function (t, context) {
        this.element.scroll = {
            x: (1 - t) * this.oldViewport.scroll.x + t * this.newViewport.scroll.x,
            y: (1 - t) * this.oldViewport.scroll.y + t * this.newViewport.scroll.y
        };
        this.element.zoom = this.oldViewport.zoom * Math.exp(t * this.zoomFactor);
        return context.root;
    };
    return ViewportAnimation;
}(animation_1.Animation));
exports.ViewportAnimation = ViewportAnimation;
//# sourceMappingURL=viewport.js.map